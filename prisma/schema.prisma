generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  GITHUB
}

enum IndexType {
  TRANSACTIONS
  TOKEN_ACCOUNTS
  PROGRAM_LOGS
  NFTS
}

enum Frequency {
  REAL_TIME
  HOURLY
  DAILY
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum IndexCategory {
  TRANSFER
  DEPOSIT
  WITHDRAW
  NFT_SALE
  NFT_MINT
  SWAP
  TOKEN_MINT
  LOAN
  STAKE_TOKEN
  BURN
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  image         String?
  createdAt     DateTime        @default(now())
  accounts      Account[]
  databases     Database[]
  indexRequests IndexRequest[]
  categories    IndexCategory[]
  indexingTasks IndexingTask[]
}

model Account {
  id                String   @id @default(uuid())
  provider          Provider
  providerAccountId String?
  accessToken       String?
  refreshToken      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  userId            String?
  user              User?    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Database {
  id           String         @id @default(uuid())
  name         String
  host         String
  port         Int
  username     String
  password     String
  dbName       String
  createdAt    DateTime       @default(now())
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  IndexRequest IndexRequest[]
  IndexedData  IndexedData[]
}

model IndexRequest {
  id            String         @id @default(uuid())
  category      IndexCategory
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  databaseId    String
  database      Database       @relation(fields: [databaseId], references: [id])
  indexType     IndexType
  targetAddr    String
  webhookSecret String         @default("")
  frequency     Frequency
  createdAt     DateTime       @default(now())
  indexingTasks IndexingTask[]
}

model IndexedData {
  id         String        @id @default(uuid())
  category   IndexCategory
  data       String
  receivedAt DateTime      @default(now())
  databaseId String
  database   Database      @relation(fields: [databaseId], references: [id])
}

model IndexingTask {
  id             String       @id @default(uuid())
  indexRequestId String
  indexRequest   IndexRequest @relation(fields: [indexRequestId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  status         TaskStatus   @default(PENDING)
  startedAt      DateTime?
  completedAt    DateTime?
  errorMessage   String?
}
